import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.play.Countdown;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;

import flixel.addons.display.FlxRuntimeShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;

// Final Escape.
// Some extra stuff is done in the other script (scripts/songs/final-escape.hxc), for the events and such, it's here.

class FinalStageErect extends Stage
{
	public function new()
	{
		super('finalstageErect');
	}

	var colorShaderBf:AdjustColorShader;
    var colorShaderDad:AdjustColorShader;
    var colorShaderGf:AdjustColorShader;
    var blackOverlay:FunkinSprite;
	var whiteOverlay:FunkinSprite; // Add this variable
	var wontGetAway:FunkinSprite;
	var bfLegs1:FunkinSprite;
	var bfLegs3:FunkinSprite;
    var opponentFloatOffset:Float = 0; // Offset for sine wave movement
    var opponentFloatEnabled:Bool = true; // Add this flag
	var opponentNoteHitShake:Bool = true;
	var sonicJump:FunkinSprite;
	var songIntroCircle:FunkinSprite;
	var songIntroText:FunkinSprite;
	var redVignette:FunkinSprite;

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		game = PlayState.instance;
		//dad = game.currentStage.getDad();

        blackOverlay = FunkinSprite.create(0, 0, 'blackness');
		blackOverlay.alpha = 1;
		blackOverlay.zIndex = 299;
		blackOverlay.scale.set(5, 5);
		blackOverlay.zIndex = 3000;
		blackOverlay.cameras = [game.camCutscene];
		blackOverlay.scrollFactor.set(0, 0); // Make it static (doesn't scroll with the camera)
		game.add(blackOverlay);

        songIntroCircle = FunkinSprite.create(0, 0, 'StartScreens/Circle-endless');
        songIntroCircle.cameras = [PlayState.instance.camCutscene];
        songIntroCircle.zIndex = 3002;
        songIntroCircle.x = FlxG.width;

        songIntroText = FunkinSprite.create(0, 0, 'StartScreens/Text-green-hill-zone');
        songIntroText.cameras = [PlayState.instance.camCutscene];
        songIntroText.zIndex = 3002;
        songIntroText.x = -songIntroText.width;

		sonicJump = FunkinSprite.create(0, 0, 'simplejump720'); // Resized it to 720p because I did NOT feel like doing all of that. 
		sonicJump.cameras = [game.camCutscene];
		game.add(sonicJump);

		sonicJump.visible = false;

		// Add white overlay (initially invisible)
		whiteOverlay = FunkinSprite.create(0, 0);
		whiteOverlay.makeGraphic(FlxG.width, FlxG.height, 0xFFFFFFFF);
		whiteOverlay.alpha = 0;
		whiteOverlay.zIndex = 4000;
		whiteOverlay.scale.set(5, 5);
		whiteOverlay.scrollFactor.set(0, 0);
		whiteOverlay.cameras = [game.camCutscene];
		game.add(whiteOverlay);
		whiteOverlay.visible = false;

		wontGetAway = FunkinSprite.create(-150, -300);
		wontGetAway.frames = Paths.getSparrowAtlas('getaway');
		wontGetAway.animation.addByPrefix('go', 'no', 24, false);
		wontGetAway.animation.play('go');
		wontGetAway.scale.set(0.7, 0.7);
		wontGetAway.zIndex = 3001;
		wontGetAway.cameras = [game.camCutscene];
		game.add(wontGetAway);
		wontGetAway.visible = false;
		wontGetAway.animation.finishCallback = function() {
			wontGetAway.visible = false;
		};

		bfLegs1 = FunkinSprite.create(-150, 350);
		bfLegs1.frames = Paths.getSparrowAtlas('characters/hisleg');
		bfLegs1.animation.addByPrefix('idle', 'leg', 24, true);
		bfLegs1.animation.play('idle');
		bfLegs1.scale.set(1, 1);
		bfLegs1.zIndex = 2000;
		game.add(bfLegs1);
		bfLegs1.visible = false;

		bfLegs3 = FunkinSprite.create(-150, 350);
		bfLegs3.frames = Paths.getSparrowAtlas('characters/hisleg3');
		bfLegs3.animation.addByPrefix('idle', 'run legs000', 24, true);
		bfLegs3.animation.play('idle');
		bfLegs3.scale.set(1.2, 1.2);
		bfLegs3.cameras = [game.camGame];
		bfLegs3.zIndex = 300;
		game.add(bfLegs3);
		bfLegs3.visible = false;

		redVignette = FunkinSprite.create(0, 0, 'RedderVG');
		redVignette.zIndex = 1000;
		redVignette.scrollFactor.set(0, 0); // Make it static (doesn't scroll with the camera)
		redVignette.cameras = [game.camCutscene];
		game.add(redVignette);
		redVignette.visible = false;

	}
    function disableHud():Void {
		if (game != null) {
			game.camHUD.alpha = 0;
			game.opponentStrumline.visible = false;
		}
	}

	function enableHud(?duration:Float = 0.4):Void {
		if (game != null) {
			FlxTween.tween(game.camHUD, { alpha: 1 }, 0.4);
		}
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void
	{
		super.onCountdownStart(event);
		
		disableHud();

		Countdown.skipCountdown();
	}

	override function buildStage()
	{
		super.buildStage();

		colorShaderBf = new AdjustColorShader();
        colorShaderDad = new AdjustColorShader();

        colorShaderBf.brightness = -23;
        colorShaderBf.hue = 12;
        colorShaderBf.contrast = 7;
		colorShaderBf.saturation = 0;

        colorShaderDad.brightness = -10;
        colorShaderDad.hue = -10;
        colorShaderDad.contrast = 15;
		colorShaderDad.saturation = 0;
	}

	function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);

        if(PlayState.instance.currentStage.getBoyfriend() != null && PlayState.instance.currentStage.getBoyfriend().shader == null)
		{
			PlayState.instance.currentStage.getBoyfriend().shader = colorShaderBf;
			if (PlayState.instance.bfLegs1 != null && PlayState.instance.bfLegs3 != null) {
				PlayState.instance.bfLegs1.shader = colorShaderBf;
			    PlayState.instance.bfLegs3.shader = colorShaderBf;
			}

			PlayState.instance.currentStage.getDad().shader = colorShaderDad;
		}
    }

	override function update(elapsed:Float):Void {
		super.update(elapsed);

		if (game != null) {
			if (opponentFloatEnabled) { // Only float if enabled
				opponentFloatOffset += elapsed * 1.5;
				game.currentStage.getDad().y += Math.sin(opponentFloatOffset) * 0.5; // Reduced from 1.5 to 0.5
			}
		}
	}

	public function onNoteHit(event:HitNoteScriptEvent)
	{
		super.onNoteHit(event);

        if (opponentNoteHitShake) {
			if (!event.note.noteData.getMustHitNote())
		    {
			   if (event.note.holdNoteSprite != null)
			   {
				   FlxG.camera.shake(0.005, event.note.holdNoteSprite.sustainLength/1000);
			   } else {
				   FlxG.camera.shake(0.005, 0.2);
			   }
		    }
		}
	}

	function onStepHit(event:SongTimeScriptEvent):Void
	{
		super.onStepHit(event);

		var introBG = getNamedProp('IntroBG');
		var flatBand = getNamedProp('FlatBand');
		var endBG = getNamedProp('EndBG');
		var greenHill = getNamedProp('GreenHill');
		var band = getNamedProp('Band');

		if (event.step >= 287 && event.step % 20 == 0 && event.step < 2350) // Flash red vignette repeatedly every 20 steps, stop at 2350
		{
			redVignette.visible = true;
			redVignette.alpha = 0;

			// Tween to fade in
			FlxTween.tween(redVignette, { alpha: 0.5 }, 0.75, { // Faster fade in
				ease: FlxEase.quadInOut,
				onComplete: function(tween:FlxTween) {
					// Tween to fade out
					FlxTween.tween(redVignette, { alpha: 0 }, 0.75, { // Faster fade out
						ease: FlxEase.quadInOut,
						onComplete: function(tween:FlxTween) {
							redVignette.visible = false;
						}
					});
				}
			});
		}

		if (event.step == 2350) {
			redVignette.visible = false;
			redVignette.alpha = 0;
			opponentFloatEnabled = false; // Stop floating at this step
		}

		if (event.step == 0)
		{
			// Show and fade in white overlay over 3.5 seconds, then hide both overlays
			if (whiteOverlay != null && blackOverlay != null) {
				whiteOverlay.visible = true;
				whiteOverlay.alpha = 0;
				FlxTween.tween(whiteOverlay, { alpha: 1 }, 2.5, {
					onComplete: function(_) {
						whiteOverlay.visible = false;
						blackOverlay.visible = false;
					}
				});
			}
		}

		if (event.step == 156)
		{
			enableHud();
			PlayState.instance.currentStage.getDad().zIndex = 7000;
		}
		if (event.step == 1616) {
			sonicJump.visible = true;
			new FlxTimer().start(1.3, function(_) {
				sonicJump.visible = false;
				FlxG.camera.flash(0xFFFF0000, 0.5);
			});
		}
		if (event.step == 287) {
			FlxG.camera.flash(0xFFFFFFFF, 0.5); // Flash white when phase 2 starts

			enableHud();

			introBG.zIndex = -50; //

			bfLegs1.visible = true;
			bfLegs1.animation.play('idle');
			//PlayState.instance.currentStage.getDad().zIndex = 600;
			PlayState.instance.currentStage.refresh();
		}
		if (event.step == 544 || event.step == 551 || event.step == 559 || event.step == 575 || event.step == 1690 || event.step == 1824 || event.step == 1952 || event.step == 1976 || event.step == 2081 || event.step == 2337 || event.step == 3648 || event.step == 3917 || event.step == 3923) {
			FlxG.camera.flash(0xFFFF0000, 0.5); // Flash red for 0.5 seconds
		}
		if (event.step == 1740) {
			wontGetAway.animation.finishCallback = function() {
				wontGetAway.visible = false;
				blackOverlay.visible = false; // Hide the black overlay after the animation finishes
			};

			blackOverlay.visible = true; // Show the black overlay as soon as the animation starts

            wontGetAway.visible = true;
			wontGetAway.animation.play('go');
		}
		if (event.step == 1760 || event.step == 2464) {
			FlxG.camera.flash(0xFFFFFFFF, 0.5); // Flash white at the end of "Wont Get Away" and after the "Green Hill Zone" intro
		}
		if (event.step == 2335) { // Green Hill Zone Section Fade-In
			blackOverlay.visible = true;
			blackOverlay.alpha = 0;
			FlxTween.tween(blackOverlay, { alpha: 1 }, 3.5, { ease: FlxEase.quadOut });
		}
		if (event.step == 2431) { // Green Hill Zone text tweens
			blackOverlay.visible = true;

			game.add(songIntroCircle);
			game.add(songIntroText);

			FlxTween.tween(songIntroCircle, {x: (FlxG.width / 2) - (songIntroCircle.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroCircle, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroCircle);
                    }
                });
            }
        });

        FlxTween.tween(songIntroText, {x: (FlxG.width / 2) - (songIntroText.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroText, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroText);
                    }
                });
            }
        });
		}
		if (event.step == 2461) { // Add it before the GHZ section actually starts so the transition is smooth
			greenHill.zIndex = 100;
			PlayState.instance.currentStage.refresh();
		}
		if (event.step == 2464) { // Where the GHZ section starts
			bfLegs1.visible = false;
			blackOverlay.visible = false;
			opponentNoteHitShake = false;
		}
		if (event.step == 3137) { // Where it ends
			FlxG.camera.flash(0xFFFFFFFF, 0.5);
            greenHill.zIndex = -100;
			endBG.zIndex = 100;
			band.zIndex = 101;
			bfLegs1.visible = true;
            PlayState.instance.currentStage.refresh();
			redVignette.visible = true; // Start displaying vignette again
			redVignette.alpha = 0.5;
			opponentNoteHitShake = true; // Re-enable opponent note hit shake
			opponentFloatEnabled = true; // Re-enable opponent floating
		}
		if (event.step == 3392 || event.step == 3520) {
			FlxG.camera.flash(0xFFFF0000, 0.5);
		}
		if (event.step == 3648) {
			FlxG.camera.flash(0xFFFFFFFF, 0.5);
			PlayState.instance.currentStage.getDad().zIndex = 101;
			endBG.zIndex = 100;
			flatBand.zIndex = 102;
			band.zIndex = -10;
			bfLegs1.visible = false;
			bfLegs3.visible = true;
			PlayState.instance.currentStage.getBoyfriend().zIndex = 400;
			PlayState.instance.currentStage.refresh();
		}
	}
	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);

		// Reset overlay states
		if (blackOverlay != null) {
			blackOverlay.visible = true;
			blackOverlay.alpha = 1;
		}
		
		if (whiteOverlay != null) {
			whiteOverlay.visible = false;
			whiteOverlay.alpha = 0;
		}
		
		if (redVignette != null) {
			redVignette.visible = false;
			redVignette.alpha = 0;
		}
		
		// Reset sprite states
		if (wontGetAway != null) {
			wontGetAway.visible = false;
		}
		
		if (bfLegs1 != null) {
			bfLegs1.visible = false;
		}
		
		if (bfLegs3 != null) {
			bfLegs3.visible = false;
		}
		
		if (sonicJump != null) {
			sonicJump.visible = false;
		}
		
		// Reset floating and shake states
		opponentFloatEnabled = true;
		opponentNoteHitShake = true;
		opponentFloatOffset = 0;
		
		// Reset HUD
		disableHud();
		
		// Reset stage prop z-indices to original values
		var introBG = getNamedProp('IntroBG');
		var flatBand = getNamedProp('FlatBand');
		var endBG = getNamedProp('EndBG');
		var greenHill = getNamedProp('GreenHill');
		var band = getNamedProp('Band');
		
		if (introBG != null) introBG.zIndex = 100;
		if (flatBand != null) flatBand.zIndex = -17;
		if (endBG != null) endBG.zIndex = -16;
		if (greenHill != null) greenHill.zIndex = -100;
		if (band != null) band.zIndex = -1;
		
		// Reset character z-indices
		if (PlayState.instance != null && PlayState.instance.currentStage != null) {
			if (PlayState.instance.currentStage.getDad() != null) {
				PlayState.instance.currentStage.getDad().zIndex = 200; // Reset to default
			}
			if (PlayState.instance.currentStage.getBoyfriend() != null) {
				PlayState.instance.currentStage.getBoyfriend().zIndex = 300; // Reset to default
			}
			PlayState.instance.currentStage.refresh();
		}
		
		// Remove intro elements if they exist
		if (songIntroCircle != null && game != null) {
			game.remove(songIntroCircle);
			songIntroCircle.x = FlxG.width; // Reset position
			songIntroCircle.alpha = 1; // Reset alpha
		}
		
		if (songIntroText != null && game != null) {
			game.remove(songIntroText);
			songIntroText.x = -songIntroText.width; // Reset position
			songIntroText.alpha = 1; // Reset alpha
		}
	}
}
