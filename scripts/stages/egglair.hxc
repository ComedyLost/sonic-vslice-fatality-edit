import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCamera;
//import flixel.util.FlxColor;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.modding.module.ModuleHandler;
/*import funkin.play.notes.NoteScriptEvent;
import funkin.play.notes.GhostMissNoteScriptEvent;
import funkin.play.song.SongTimeScriptEvent;
import funkin.modding.events.UpdateScriptEvent;
import funkin.play.countdown.CountdownScriptEvent;*/

class EggmanLair extends Stage
{
	var healthBarMembers:Array<Dynamic>;
	var iconMembers:Array<Dynamic>;
	var game:PlayState;
	var songID:String;
	var modChartsEnabled:Bool;
	//var flippedHealthBarEnabled:Bool = true; // Enable flipped health bar by default
	
	// Fear Bar variables
	var currentBarPercent:Float = 0.01; // Start with minimal fear
	var fearBarBG:FunkinSprite;
	var fearBar:FunkinSprite;
	var fearBarFill:FunkinSprite;

	public function new()
	{
		super('egglair');
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		game = PlayState.instance; // i dont even use this shortcut half the time
		songID = PlayState.instance.currentSong.id.toLowerCase();
		curStage = PlayState.instance.currentStage;

		modChartsEnabled = ModuleHandler.getModule("EXEOptions").scriptGet("modcharts");
		intensiveGoreEnabled = ModuleHandler.getModule("EXEOptions").scriptGet("intensivegore");


        // Some people may not enjoy Sonic with his guts hanging out
		if (!intensiveGoreEnabled) {
			curStage.getNamedProp('StarvedSonicDead').visible = false;
		}

		if (songID == 'fight-or-flight') {
			fearBar = FunkinSprite.create(FlxG.width - 100, 100, 'fearbar');
			fearBar.cameras = [game.camHUD];
			fearBar.zIndex = 1002;
			fearBar.scale.set(0.82, 1.1);
			game.add(fearBar);

			fearBarBG = FunkinSprite.create(fearBar.x, fearBar.y, 'fearbarBG');
			fearBarBG.cameras = [game.camHUD];
			fearBarBG.zIndex = 1000;
			fearBarBG.scale.set(0.82, 1.1);
			game.add(fearBarBG);

			// Create the red fill bar
			fearBarFill = FunkinSprite.create(fearBar.x + 15, fearBar.y + 20);
			fearBarFill.makeGraphic(40, 250, 0xFFFF0000);
			fearBarFill.offset.set(0, 10);
			fearBarFill.scale.set(0.65, 1.0);
			fearBarFill.cameras = [game.camHUD];
			fearBarFill.zIndex = 1001;
			game.add(fearBarFill);
		}

	}

	override function onCountdownStart(event:CountdownScriptEvent):Void
	{
		super.onCountdownStart(event);

		if (songID != 'fight-or-flight') return;

		healthBarMembers = [game.healthBar, game.healthBarBG];
		iconMembers = [game.iconP1, game.iconP2];

		if (modChartsEnabled) {
			PlayState.instance.playerStrumline.x = FlxG.width / 2 - game.playerStrumline.width / 2;
			PlayState.instance.opponentStrumline.visible = false;
		}

		for (member in healthBarMembers)
		{
			member.visible = false;
		}
		for (member in iconMembers)
		{
			member.visible = false;
		}

	}

	override function buildStage()
	{
		super.buildStage();
	}

	override function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);
		updateFearBar();
	}
	
	function updateFearBar():Void
	{
		if (songID != 'fight-or-flight') return;
		if (fearBarFill == null) return;
		
		if (currentBarPercent < 1.0)
		{
			currentBarPercent += 0.000015;
		}
		
		// Clamp fear bar percentage
		if (currentBarPercent > 1.0) currentBarPercent = 1.0;
		if (currentBarPercent < 0.0) currentBarPercent = 0.0;
		
		// Kill player if fear bar is maxed
		if (currentBarPercent >= 1.0)
		{
			PlayState.instance.health = 0;
		}
		
		var maxHeight = 280;
		var newHeight = Math.max(1, Std.int(maxHeight * currentBarPercent));
		
		fearBarFill.makeGraphic(40, newHeight, 0xFFFF0000);
		fearBarFill.y = fearBar.y + 20 + (maxHeight - newHeight);
	}
	
	override function onNoteHit(event:NoteScriptEvent):Void
	{
		super.onNoteHit(event);
		
		if (songID != 'fight-or-flight') return;
		
		var isPlayerNote = event.note.noteData.getMustHitNote();
		
		if (isPlayerNote)
		{
			if (currentBarPercent > 0)
			{
				currentBarPercent -= 0.0004;
			}
		}
		else
		{
			if (currentBarPercent < 1.0)
			{
				currentBarPercent += 0.0003;
			}
		}
	}
	
	override function onNoteMiss(event:NoteScriptEvent):Void
	{
		super.onNoteMiss(event);
		
		if (songID != 'fight-or-flight') return;
		
		var isPlayerNote = event.note.noteData.getMustHitNote();
		if (isPlayerNote && event.note.noteType == '' && currentBarPercent < 1.0)
		{
			currentBarPercent += 0.025;
		}
	}
	
	override function onNoteGhostMiss(event:GhostMissNoteScriptEvent):Void
	{
		super.onNoteGhostMiss(event);
		
		if (songID != 'fight-or-flight') return;
		
		// Ghost miss - increase fear
		if (currentBarPercent < 1.0)
		{
			currentBarPercent += 0.015;
		}
	}
	
	function onStepHit(event:SongTimeScriptEvent):Void
	{
		super.onStepHit(event);
	}
	
	override function onBeatHit(event:SongTimeScriptEvent):Void
	{
		super.onBeatHit(event);
		
		if (songID != 'fight-or-flight') return;
		
		if (currentBarPercent > 0.53 && Conductor.instance.currentStep < 2144)
		{
			if (PlayState.instance.health > 0.08 && currentBarPercent < 1.0)
			{
				PlayState.instance.health -= 0.046;
			}
		}
	}
}
